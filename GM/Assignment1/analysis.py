import argparse
import numpy as np
from scipy import sparse
from scipy.sparse.linalg import svds
from collections import Counter, OrderedDict
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt



""" Helper functions for analysis"""
def drawLogLogPlot(filename, xvalues, yvalues, title='figure', xlabel='x_label', ylabel='y_label'):
    """Draws log-log plot then save as image"""
    plt.figure()
    plt.xscale('log')
    plt.yscale('log')
    plt.scatter(xvalues, yvalues)
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.xlim(min(xvalues)*0.1, max(xvalues)*10)
    plt.ylim(min(yvalues)*0.1, max(yvalues)*10)
    plt.savefig(filename)
    plt.close()
    
def getSingularValues(mat, k=100):
    """Returns top-k singular values in decreasing order"""
    _1, s, _2 = svds(sparse.coo_matrix(mat).asfptype(), k=k, tol=1e-6, which='LM')
    return sorted(s.tolist(), reverse=True)

def analyzeInDegrees(mat, save):
    ### TODO: WRITE YOUR CODE HERE. ############################################
    xs, ys = [], []
    matrix = mat.toarray()

    xs.extend(matrix.sum(axis=0).tolist())
    deg_cnt_od = OrderedDict(sorted(Counter(xs).items()))

    xs = list(deg_cnt_od.keys()) 
    ys = list(deg_cnt_od.values()) 

    # To enable log-log scale plotting
    if xs[0] == 0:
        xs = xs[1:]
        ys = ys[1:]
    ############################################################################
    drawLogLogPlot(f'indeg_{save}.png', xs, ys, save, 'Log-scaled Node Degree', 'Log-scaled # of Nodes')
    pass
    

def analyzeOutDegrees(mat, save):
    ### TODO: WRITE YOUR CODE HERE. ############################################
    xs, ys = [], []
    matrix = mat.toarray()

    xs.extend(matrix.sum(axis=1).tolist())
    deg_cnt_od = OrderedDict(sorted(Counter(xs).items()))

    xs = list(deg_cnt_od.keys())
    ys = list(deg_cnt_od.values())

    # To enable log-log scale plotting
    if xs[0] == 0:
        xs = xs[1:]
        ys = ys[1:]
    ############################################################################
    drawLogLogPlot(f'outdeg_{save}.png', xs, ys, save, 'Log-scaled Node Degree', 'Log-scaled # of Nodes')
    pass
    
def analyzeSingularValues(mat, save):
    ### TODO: WRITE YOUR CODE HERE. ############################################
    k = 100
    drawLogLogPlot(f'svd_{save}.png', (np.arange(k) + 1).tolist(), getSingularValues(mat, k=k), save)
    pass
    ############################################################################

if __name__ == '__main__':
    """
    Analyzing a graph generated by R-MAT.
    positional arguments:
        INPUT       The file name of an input matrix

    Example:
        python analysis.py example.npz
    """
    parser = argparse.ArgumentParser(description='Analyzing a graph generated by R-MAT.')
    parser.add_argument("--input", metavar="INPUT", type=str, default='G_1L.npz',
                        help="The file name of an input matrix")
    args = parser.parse_args()
    
    # Validation for inputs. DO *NOT* MODIFY THIS PART!
    valid = True
    if type(args.input) != str or len(args.input) == 0:
        print('ERROR: You should specify the path of an input matrix.')
        valid = False
    if not valid:
        print('ERROR: Validation for inputs failed. Please check your code again.')
        exit(0)
    
    try:
        matrix = sparse.load_npz(args.input)
    except:
        print('ERROR: An error occurred while reading the input.')
        exit(0)
    
    save_name = args.input.split('.')[0]

    analyzeInDegrees(matrix, save_name)
    analyzeOutDegrees(matrix, save_name)
    analyzeSingularValues(matrix, save_name)

    # python analysis.py --input G_1S.npz
    # python analysis.py --input G_1L.npz
    # python analysis.py --input G_2S.npz
    # python analysis.py --input G_2L.npz
    # python analysis.py --input G_3S.npz
    # python analysis.py --input G_3L.npz